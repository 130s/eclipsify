#!/usr/bin/env python

import catkin.workspace

try:
    import catkin_pkg.packages
    foundCatkinPkg = True
except:
    foundCatkinPkg = False
    print("Unable to import catkin_pkg.")
    print("Without it eclipsify won't find packages in subfolders of the 'src' folder or in other than the top level workspace.")
    print("If this is needed try:")
    print("  sudo apt-get install catkin_pkg")
    print("or use the eclipsify-gen-project cli tool.")

import os
import sys
from eclipsify_lib.tools import colored
 
from argparse import ArgumentParser, RawDescriptionHelpFormatter
import subprocess

def check_ps_cmd(script_name):
    for proc in psutil.process_iter():
        if proc == script_name:
            return True
    return False

usage="""
This utility creates a new eclipse project. It assumes the package is
in a workspace with the default names for the devel/build/src spaces.
If your workspace is different, try eclipsify-gen-project. If the
command is called with the optional -w option, pointing to an existing
eclipse workspace, the project is added to the eclipse workspace. You 
must not have this workspace open in eclipse when you use -w.

The project files will go to devel/share/project-name/eclipse"""

parser = ArgumentParser(description=usage,formatter_class=RawDescriptionHelpFormatter)

parser.add_argument("package", nargs=1, help="The name of the catkin package to be eclipsified.")
parser.add_argument('-w', dest='eclipse_workspace', help='The path to the eclipse workspace that this package should be added to.')
parser.add_argument('-W,--catkin-ws', dest='catkin_workspace', help='The path to the catkin workspace that this package should be. It must point to the workspace\'s devel space! Default is to use the current catkin workspace layers ("sourced").')

options = parser.parse_args()
if options.eclipse_workspace:
    import psutil

package = options.package[0]


print "-- Searching workspaces:"
if options.catkin_workspace:
    import os.path;
    catkin_workspaces = [options.catkin_workspace];
    catkin_workspaces = [os.path.abspath(ws) for ws in catkin_workspaces]; 
else:
    catkin_workspaces = catkin.workspace.get_workspaces()
    

if len(catkin_workspaces) == 0:
    print colored('No workspaces! Please source the setup.bash file of some workspace before running this script.'.format(package),'red');
    exit(-1)

print colored("--> Found %s" % (", ".join(catkin_workspaces)), 'green')

print "-- Searching for %s:" % (package);

class Workspace :
    def __init__(self, develSpace):
        self._develspace = develSpace
        self._base = os.path.dirname(develSpace)
        
    def getPath(self):
        return _base;
    def getDevelSpace(self):
        return self._develspace;
    def getBuildSpace(self):
        return os.path.join(self._base, 'build');
    def getSourceFolder(self):
        return os.path.join(self._base, 'src');

src = None
workspace = None

def isPackageSrc(spath):
    return os.path.exists(os.path.join(spath, "package.xml"))

# Initialize with a good guess. This helps find 
# pure cmake packages that are not found by the method below.
workspace = Workspace(catkin_workspaces[0])
src = os.path.join(workspace.getSourceFolder(), package)
if foundCatkinPkg:
    cnt = 0
    for ws in catkin_workspaces:
        for s in catkin.workspace.get_source_paths(ws):
            if isPackageSrc(s): 
                p = catkin_pkg.packages.parse_package(s);
                if(p.name == package):
                    if cnt==0:
                        workspace = Workspace(ws)
                        src = s
                        print colored('-- Found {0} in workspace {1} with source {2}'.format(package, ws, s), 'green')
                    else:
                        print colored('-- Package ambigous also in workspace {0} with source {1}'.format(ws, s), 'red')
		    cnt+=1



if not src or not isPackageSrc(src) :
    print colored('-- Could not find package {0}. Aborting.'.format(package), 'red')
    exit(-2)
    
print colored('--> Found {0}'.format(src), 'green')
print

share = os.path.join(workspace.getDevelSpace(), 'share', package)
if not os.path.exists(share):
    import eclipsify_lib.tools
    eclipsify_lib.tools.mkdir_p( share )


from eclipsify_lib.eclipsify_gen_project import main

eclipse_project=os.path.join(share,'eclipse')
main(argv=[package, src, eclipse_project, os.path.join(workspace.getBuildSpace(), package)]);

# Add the package to a workspace if necessary.
if options.eclipse_workspace:
    workspace = os.path.abspath(options.eclipse_workspace)
    print "-- Trying to add the package to the eclipse workspace at: {0}".format(workspace)
    print "-- Checking if eclipse is running"
    if check_ps_cmd('eclipse'):
        print colored('-- ERROR: Unable to add a package to a workspace if eclipse is running','red')
        exit(2)
    if not os.path.exists(workspace):
        print colored("-- ERROR: The workspace path does not exist",'red')
        exit(2)
    cmd = 'eclipse -nosplash -data {0} -application org.eclipse.cdt.managedbuilder.core.headlessbuild -import {1}'.format(workspace, eclipse_project)
    print cmd
    status = subprocess.call(cmd, shell=True)
    if status != 0:
        print colored('-- ERROR Eclipse returned an error. This may not have worked.','red');
        exit(2)
    print colored('-- Successfully added {0} to the workspace at {1}'.format(package, workspace), 'green')
